#Created by st.Game
#https://github.com/andrii1890
#Find me at Discord: st_Game and Telegram: @Andrii1890
#version: "0.1"

services:
  erigon:
    image: erigontech/erigon:latest
    container_name: erigon
    ports:
      - "30303:30303/tcp" # P2P TCP
      - "30303:30303/udp" # P2P UDP
      - "4000:4000/tcp"   # Caplin TCP
    command:
      - --chain=sepolia
      - --prune.mode=minimal
      - --http
      - --http.addr=0.0.0.0
      - --http.port=8545
      - --http.vhosts=*
      - --http.corsdomain=*
      - --ws
      - --ws.port=8546
      - --http.api=eth,erigon,engine,net,trace,admin,ots,web3,txpool,debug
      - --beacon.api.addr=0.0.0.0
      - --beacon.api.port=5555
      - --beacon.api.cors.allow-methods=GET,POST,PUT,OPTIONS
      - --beacon.api.cors.allow-origins=*
      - --beacon.api=beacon,builder,config,debug,node,lighthouse
      - --private.api.addr=127.0.0.1:9070
      - --caplin.blobs-immediate-backfill=true
      - --db.size.limit=200GB
      - --state.cache=512
      - --metrics
      - --metrics.addr=0.0.0.0
      - --metrics.port=6061
      - --torrent.download.rate=90mb
      - --nat=stun
    networks:
      - node
    volumes:
      - ./data/erigon:/home/erigon/ # Erigon Datastore
    stop_grace_period: 45s
    restart: unless-stopped

  aztec:
    image: aztecprotocol/aztec:alpha-testnet
    container_name: aztec
    environment:
      ETHEREUM_HOSTS: "http://erigon:8545"
      L1_CONSENSUS_HOST_URLS: "http://erigon:5555"
      DATA_DIRECTORY: /data
      VALIDATOR_PRIVATE_KEY: $VALIDATOR_PRIVATE_KEY
      P2P_IP: $P2P_IP
      AZTEC_PORT: 8080
      LOG_LEVEL: debug
    entrypoint: >
      sh -c '/wait-for-erigon.sh && node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start --network alpha-testnet --node --archiver --sequencer'
    ports:
      - "40400:40400/tcp"
      - "40400:40400/udp"
      - "8080:8080"
    networks:
      - node
    volumes:
      - ./data/aztec:/data
      - ./wait-for-erigon.sh:/wait-for-erigon.sh
    depends_on:
      - erigon
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: ":"
    restart: unless-stopped
    networks:
      - node
    volumes:
      - ./data/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: ":"
    restart: unless-stopped
    networks:
      - node
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./data/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./data/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./data/grafana/dashboards:/etc/dashboards
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/dashboards/dashboard.json

  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    hostname: loki
    networks:
      - node
    volumes:
      - ./data/loki/loki-config.yaml:/etc/loki/loki-config.yaml
    command: -config.file=/etc/loki/loki-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    volumes:
      - ./data/promtail/config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    command: |
      --config.file=/etc/promtail/config.yml
      --config.expand-env=true
    networks:
      - node
    restart: unless-stopped

networks:
  node:
    driver: bridge
